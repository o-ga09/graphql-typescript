type PostTag {
  name: String!
}

type Note {
  id: ID!
  title: String!
  content: String!
  tags: [PostTag!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  birthday: String
  sex: String
  passwordHash: String
  address: String
  role: String!
}

type Role {
  id: ID!
  name: String!
  permissions: [String!]!
}

type AuthPayload {
  token: String
  user: User!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]

  getRole(id: ID!): Role
  getRoles: [Role]

  currentUser: User

  getNotes: [Note]
  getNoteById(id: ID!): Note
}

type Mutation {
  createUser(username: String!, email: String!, role: String!, birthday:String!, sex: String!,passwordHash:String!, address:String!): User
  updateUser(id: ID!, username: String, email: String, role: String,birthday:String!, sex: String!,passwordHash:String!, address:String!): User
  deleteUser(id: ID!): User

  createRole(name: String!, permissions: [String!]!): Role
  updateRole(id: ID!, name: String, permissions: [String!]!): Role
  deleteRole(id: ID!): Role

  login(userId: String, email: String, password: String!): AuthPayload
  logout: Boolean

  createNote(title: String!, content: String!, tags: [String!]!): Note
  updateNote(id: ID!, title: String, content: String, tags: [String!]!): Note
  deleteNote(id: ID!): Note
}
